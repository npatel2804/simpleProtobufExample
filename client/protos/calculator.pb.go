// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculator.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FunctionRequest struct {
	Num1                 int32    `protobuf:"varint,1,opt,name=num1,proto3" json:"num1,omitempty"`
	Num2                 int32    `protobuf:"varint,2,opt,name=num2,proto3" json:"num2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FunctionRequest) Reset()         { *m = FunctionRequest{} }
func (m *FunctionRequest) String() string { return proto.CompactTextString(m) }
func (*FunctionRequest) ProtoMessage()    {}
func (*FunctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_044fd74d4508fc3f, []int{0}
}
func (m *FunctionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FunctionRequest.Unmarshal(m, b)
}
func (m *FunctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FunctionRequest.Marshal(b, m, deterministic)
}
func (dst *FunctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionRequest.Merge(dst, src)
}
func (m *FunctionRequest) XXX_Size() int {
	return xxx_messageInfo_FunctionRequest.Size(m)
}
func (m *FunctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionRequest proto.InternalMessageInfo

func (m *FunctionRequest) GetNum1() int32 {
	if m != nil {
		return m.Num1
	}
	return 0
}

func (m *FunctionRequest) GetNum2() int32 {
	if m != nil {
		return m.Num2
	}
	return 0
}

type FunctionResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FunctionResponse) Reset()         { *m = FunctionResponse{} }
func (m *FunctionResponse) String() string { return proto.CompactTextString(m) }
func (*FunctionResponse) ProtoMessage()    {}
func (*FunctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_044fd74d4508fc3f, []int{1}
}
func (m *FunctionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FunctionResponse.Unmarshal(m, b)
}
func (m *FunctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FunctionResponse.Marshal(b, m, deterministic)
}
func (dst *FunctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionResponse.Merge(dst, src)
}
func (m *FunctionResponse) XXX_Size() int {
	return xxx_messageInfo_FunctionResponse.Size(m)
}
func (m *FunctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionResponse proto.InternalMessageInfo

func (m *FunctionResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*FunctionRequest)(nil), "calculator.FunctionRequest")
	proto.RegisterType((*FunctionResponse)(nil), "calculator.FunctionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorClient interface {
	SubNum(ctx context.Context, in *FunctionRequest, opts ...grpc.CallOption) (*FunctionResponse, error)
	SumNum(ctx context.Context, in *FunctionRequest, opts ...grpc.CallOption) (*FunctionResponse, error)
}

type calculatorClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorClient(cc *grpc.ClientConn) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) SubNum(ctx context.Context, in *FunctionRequest, opts ...grpc.CallOption) (*FunctionResponse, error) {
	out := new(FunctionResponse)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/SubNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) SumNum(ctx context.Context, in *FunctionRequest, opts ...grpc.CallOption) (*FunctionResponse, error) {
	out := new(FunctionResponse)
	err := c.cc.Invoke(ctx, "/calculator.Calculator/SumNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServer is the server API for Calculator service.
type CalculatorServer interface {
	SubNum(context.Context, *FunctionRequest) (*FunctionResponse, error)
	SumNum(context.Context, *FunctionRequest) (*FunctionResponse, error)
}

func RegisterCalculatorServer(s *grpc.Server, srv CalculatorServer) {
	s.RegisterService(&_Calculator_serviceDesc, srv)
}

func _Calculator_SubNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).SubNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/SubNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).SubNum(ctx, req.(*FunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_SumNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).SumNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calculator/SumNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).SumNum(ctx, req.(*FunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calculator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubNum",
			Handler:    _Calculator_SubNum_Handler,
		},
		{
			MethodName: "SumNum",
			Handler:    _Calculator_SumNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator.proto",
}

func init() { proto.RegisterFile("calculator.proto", fileDescriptor_calculator_044fd74d4508fc3f) }

var fileDescriptor_calculator_044fd74d4508fc3f = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x4e, 0xcc, 0x49,
	0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0x59, 0x72, 0xf1, 0xbb, 0x95, 0xe6, 0x25, 0x97, 0x64, 0xe6, 0xe7, 0x05, 0xa5, 0x16, 0x96,
	0xa6, 0x16, 0x97, 0x08, 0x09, 0x71, 0xb1, 0xe4, 0x95, 0xe6, 0x1a, 0x4a, 0x30, 0x2a, 0x30, 0x6a,
	0xb0, 0x06, 0x81, 0xd9, 0x50, 0x31, 0x23, 0x09, 0x26, 0xb8, 0x98, 0x91, 0x92, 0x16, 0x97, 0x00,
	0x42, 0x6b, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x18, 0x17, 0x5b, 0x51, 0x6a, 0x71, 0x69,
	0x4e, 0x09, 0x54, 0x37, 0x94, 0x67, 0x34, 0x8b, 0x91, 0x8b, 0xcb, 0x19, 0x6e, 0xab, 0x90, 0x2b,
	0x17, 0x5b, 0x70, 0x69, 0x92, 0x5f, 0x69, 0xae, 0x90, 0xb4, 0x1e, 0x92, 0xf3, 0xd0, 0x5c, 0x22,
	0x25, 0x83, 0x5d, 0x12, 0x62, 0x97, 0x12, 0x03, 0xc4, 0x98, 0x5c, 0x4a, 0x8d, 0x71, 0xe2, 0x88,
	0x62, 0x03, 0x07, 0x4c, 0x71, 0x12, 0x84, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x64, 0x56,
	0x9a, 0x78, 0x34, 0x01, 0x00, 0x00,
}
